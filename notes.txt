Book:
    Design Patterns - Elements of Reusable Object-Oriented Software - 1994
    Erich Gamma, Richard Helm, Ralph Johnson, John Vissides (Ganf of Four)

23 padrões de projeto
3 categorias:

    * Criacionais: Cujo foco é na criação, construção de objetos
    * Comportamentais: Focados nos métodos, estado e interação entr objetos
    * ESTRUTURAIS: Focados em composição e estruturais entre objetos

        - Adapter
             "Permite que objetos com interfaces incompatíveis colaborem."
             "Use quando quiser usar alguma classe existente, mas sua interface não é compatível com o resto do seu código."

             "Use quando quiser reutilizar várias subclasses existentes que carecem de alguma funcionalidade comum que não pode ser adicionada à superclasse."

            Para saber mais: https://refactoring.guru/design-patterns/adapter
                             https://refactoring.guru/design-patterns/adapter/java/example
        - Decorator
            "Decorar(compor) um objeto com outro objeto." (árvore de natal sendo decorada com pisca-pisca, bolinhas...)
            "Permite adicionar novos comportamentos a um objeto, tornando o código bastante flexível e dinâmico."

            "Usando decoradores, é possível agrupar objetos inúmeras vezes, pois os objetos de destino e os decoradores
            seguem a mesma interface. O objeto resultante terá um comportamento de empilhamento de todos os wrappers."

            "Utilize quando você precisa ser capaz de projetar comportamentos adicionais para objetos em tempo de
             execução sem quebrar o código que usa esses objetos."

             "Utilize quando é complicado ou impossível estender o comportamento de um objeto usando herança.'

            Para saber mais: https://refactoring.guru/design-patterns/decorator
                             https://refactoring.guru/design-patterns/decorator/java/example
        - Composite
            "Compor objetos como uma árvore."
            "É possóvel trabalhar com coleções de itens que podem ter mais de uma implementação."

            "Use quando precisar implementar uma estrutura de objeto semelhante a uma árvore."
            "Use quando quiser que o código do cliente trate elementos simples e complexos de maneira uniforme."

            Para saber mais: https://refactoring.guru/design-patterns/composite
                             https://refactoring.guru/design-patterns/composite/java/example

        -  Facade
            "Fornece uma interface simplificada (mas limitada) para um sistema complexo de classes, biblioteca ou estrutura."

            "Use quando quiser estruturar um subsistema em camadas."

            Para saber mais: https://refactoring.guru/design-patterns/facade
                             https://refactoring.guru/design-patterns/facade/java/example
        - Proxy

            "Permite que você forneça um substituto ou um espaço reservado para outro objeto.
            Um proxy controla o acesso ao objeto original, permitindo que você faça algo ou antes ou depois do pedido chegar ao objeto original."

            "Inicialização preguiçosa (proxy virtual).
            Este é quando você tem um objeto do serviço peso-pesado que gasta recursos do sistema por estar sempre rodando,
            mesmo quando você precisa dele de tempos em tempos."

            "Controle de acesso (proxy de proteção).
            Este é quando você quer que apenas clientes específicos usem o objeto do serviço; por exemplo, quando
            seus objetos são partes cruciais de um sistema operacional e os clientes são várias aplicações iniciadas (incluindo algumas maliciosas)"
             Para saber mais: https://refactoring.guru/design-patterns/proxy
                              https://refactoring.guru/design-patterns/proxy/java/example

